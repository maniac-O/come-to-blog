


// 중요: newspaperJS2.js 코드는 newpaperJS.js의 파일을 수정한 파일이다.


// FIXME:FIXME: 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 문제점 FIXME:FIXME:

// 문제점 1
// insertContents()함수가 수정되었으며, data-index를 1~5, 6~10, 11~15, 16~20로 가진 div들을 div로 한번 더 묶는 코드이다. 즉, 한 행을 묶겠다는 말이다.
// 한 행으로 묶는 이유는 위에 navbar를 하나씩 클릭할때마다 transition효과로 부드럽게 한 행씩 최상위로 올라오는 동작을 수행하기 위해서였다.
// 하지만 묶은 뒤 innerHTML로 삽입 시 자바스크립트 파일이 html파일보다 느리게 실행 되므로 html에서 작성한 사진과 글자 등 모든 본문내용이 초기화 되어버린다.
// 또한 소스코드 27행의 sortDataIndex()를 주석처리 한 뒤 실행시키면 본문이 잘 덮어 씌여진다. 하지만 풀면 실행되지 않는데, 여기서 또 한가지 문제점이 발견된다.
// newpaperJS파일의 기본 동작 원리는 div 태그를 만들고(createContents) => 본문을 집어넣고(insertContents()) => grid의 순서를 나타내는 order속성을 삽입하고(insertOrder()) => 
// 뒤죽박죽 되어있는 html을 정렬하고(sortDataIndex())하는 것이다. (나머지 statbar()와 clicked_contents()는 각각 한 글자를 하이라이트 효과를 주는 것과 클릭 시 이벤트이다.)
// 그렇기 때문에 sortDataIndex()를 주석처리 한 뒤 실행을 시키면 본문은 문제없이 나와 보이지만 본문내용도 끌끔하게(ㅅㅂ) 다 날아 갔는데 막상 뚜껑을 열어보면 정렬도 안되어있어서
// html코드도 망한 것을 알 수 있다.

// 왜 div로 또 다시 묶냐고 궁금할 수 있는데 그 이유는 grid에 order 속성으로(이하 order) 순서를 설정하게 되어있다.
// 이를 변경하기 위해서는 order 속성을 변경해야 하는데 transition속성을 준 뒤 order속성을 변경하게되면 생각했던 그림이 나오지 않는데(딱딱하게 위치만 툭툭 바뀜),
// 원인은 
// 1번. order속성은 location이 있는 것이 아니기 때문에, order 속성이 변경되면 진짜 각각의 순서만 바뀌게된다. 그런 이유로 뚝뚝 끊기는 모양이 나오고,
// 2번. 그렇게 끊기는 모양이 for문으로 동작하기 때문에 transition 속성으로 인해 하나씩 순차적으로 끊기게 위치가 바뀐다. 그렇기 때문에 더더욱 부자연스럽다.

// ====================================================================================================

// 문제점 2
// 본문 클릭 이벤트가 촌스럽다. 클릭하면 본인을 복사해서 => 위치를 변동시키면 될듯

// 문제점 3
// 아쉽다고 느끼는게 전체적으로 너무 꽉차있다. 내부는 30프로 정도 작게해서 전체적으로 여유을 주면 좋겠다.

// 문제점 4
// 전체적으로 구겨진 듯한 배경 이미지를 썼으면 상당히 좋았을것 같다. 옛날 종이같은 배경, 각 모서리에 찢겨진 옛날 종이 등등

// 중요:
// 문제점 5
// sidebar가 없어서 더 꽉 차있는 느낌이 드는건지 모르겠다. 본문만 잔뜩 차있으니깐 사실 눈에 보기에도 별로다.
// 본문 내용을 한 눈에 볼수있는 것 or 다른 정보를 재공하는 영역이 추가로 있어야 짜임새도 있어보이고 여유도 있어보이는 것 같다.



// NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:
// ==================================================================================================================================================================================================
// NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:


// FIXME: 문제점 해결방안
// grid로 contents를 만들었는데 grid는 그런 본문내용보단 전체적인 레이아웃을 만드는 편이 맞는 것 같다.
// 왜냐하면 본문내용은 동적인 이펙트를 만들기도 하고, 위치를 변경시키거나 속성을 변경시키는 경우가 많기 때문이다.

// 중요:
// 이번에는 grid를 사용하기 위한 블로그였지만 다음부터는 첫 설계를 잘해야할것 같다. 만드는 블로그들을 보면(starEffect, newspaper) 첫 설계가 잘못된 것들이 많다.



// NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:
// ==================================================================================================================================================================================================
// NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:


// TODO:배운점
// 1. grid의 사용법, 좋은점과 아쉬운점
//  1-1. order값으로 순서 바꾸기

// 2. 색상의 조합과 첫 설계의 중요성

// 중요:
// 3. data의 사용법(jQuery와 javascript에서의 data를 뽑아내는법, 그 data 값으로 정렬하는 법)
// 4. jQuery에서 여러개의 태그를 선택한 뒤 각각의 index에 따른 태그 선택 후 css값 편집 (이하 소스코드)
    /*
    nowIndex = $('[data-index]');
        for(let i=0; i<jqI_len; i++){
            oldArray[i] = oldArray[i].index;
            $(nowIndex[i]).css('order',oldArray[i]);    <= 이 부분이 특정 index를 선택한 뒤 css를 변경하는 방법이다.
        }
    */

// 중요:
// 5. 동적으로 본문 만드는 방법
//    (직접 사진을 넣고싶은 본문은 패스해서 본문만 넣어줬고, 나머지는 data-index번호를 검사해서 만들어 줬다.)
// 6. animation-direction : reverse는 그냥   to => from으로 재생시켜주는게 아니다. 
//                                          from => to가 끝나면 다음 재생은 to=>from으로 시켜주는 것이다.



// NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:
// ==================================================================================================================================================================================================
// NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:NOTE:

        

// TODO:좋은점
// header의 색감이 상당히 좋다. 청록색?에 검은빛이 살짝 도는 노란색이 조합이 상당하다 + 버건디 색상의 포인트까지! 옛날 느낌도 나고
// header의 font 크기와 스타일이 잘맞다. 하지만 아쉽게도 한국어는 지원되지 않는다.
// 알게모르게 들어간 네이게이션바와 본문의 그라데이션 이 점이 뭔가 아쉬웠던 밸런스를 잘 맞춰줬다.
// 소재의 신선함

